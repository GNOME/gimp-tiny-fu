Installation instructions for GIMP 2.3
--------------------------------------

Here are some basic steps to building and installing the Tiny-Fu plug-in
for the 2.3/CVS version of GIMP.

The most important part of building Tiny-Fu is to make sure the requirements
for building it are fulfilled. It depends on a number of tools and libraries
which are listed below. For libraries this means you also need to have the
header files installed.

  ******************************************************************
  * Unless you are experienced with building software from source, *
  * you should not attempt to build all these libraries yourself!  *
  * We suggest that you check if your distributor has development  *
  * packages of them and use these instead.                        *
  ******************************************************************

  1. You need to have installed a recent version of pkg-config available
     from http://www.freedesktop.org/software/pkgconfig/.  

  2. You need to have installed GTK+ version 2.8.17 or newer.  Tiny-Fu
     needs an even more recent version of GLib (>= 2.10.2). Sources
     for these can be grabbed from ftp://ftp.gtk.org/.

  3. You need to have installed a version of GIMP that was built from a
     2.3 source tarball or from CVS.

  4. Configure Tiny-Fu by running the 'configure' script. You may want
     to pass some options to it, see below.

  5. Build Tiny-Fu by running 'make'. The use of GNU make is recommended.
     If you need to tweak the build to make it work with other flavours
     of make, I'd appreciate if you would send a patch with the changes.

  6. Install Tiny-Fu by running 'make install'.

If you have any old GLib or GTK+-2.x libraries lying around on your
system, configure may fail to find the new ones.


Generic instructions for configuring and compiling auto-configured
packages are included below. Here is an illustration of commands that
might be used to build and install GIMP. The actual configuration,
compilation and installation output is not shown.

  % tar xvfz gimp-tiny-fu-1.1.x.tar.gz   # unpack the sources
  % cd gimp-tiny-fu-1.1.x                # change to the toplevel directory
  % ./configure                          # run the 'configure' script
  % make                                 # build GIMP
  % make install                         # install GIMP


The 'configure' script examines your system, and adapts Tiny-Fu to run
on it. The script has many options, some of which are described in the
generic instructions included at the end of this file. All of the
options can be listed using the command './configure --help'. There
are several special options the Tiny-Fu 'configure' script recognizes.
These are:

  --enable-shared and --disable-shared.  This option affects whether
     shared libraries will be built or not. Shared libraries provide
     for much smaller executables. The default is to enable shared
     libraries. Disabling shared libraries is almost never a good idea.

  --disable-gimp-tiny-fu-console.  Use this option if you don't want the
     gimp-tiny-fu-console binary to be built in addition to the standard binary.
     gimp-tiny-fu-console is useful for command-line batch mode or as a server.

The 'make' command builds:
 - The main Tiny-Fu program 'tiny-fu' in the 'tiny-fu' directory.

The 'make install' command installs the tiny-fu plug-in, some scripts and data
files, and language translation files. After running 'make install', and assuming
the build process was successful, you should be able to use Tiny-Fu scripts and
features when you run GIMP.


When ./configure fails
======================

'configure' uses pkg-config, a tool that replaces the old foo-config
scripts. The most recent version is available from 
	http://www.freedesktop.org/software/pkgconfig/

'configure' checks for the glib and gtk+ libraries on your system. In
addition to these libraries, it also checks for GIMP libraries. You need
the related libraries and header files installed, otherwise you'll get a
message that will indicate which library was not found.

If you are sure that those libraries are correctly installed, but configure
fails to detect them, the following might help:

Set your LDFLAGS environment variable to look for the library in a certain
place, e.g. if you are working in a bash shell you would say:
      export LDFLAGS="-L<path_to_library> -L<path_to_another_one>"
before you run configure.

Set your CPPFLAGS environment variable to look for the header file in a
certain place, e.g. if you are working in a bash shell you would say:
      export CPPFLAGS="-I<path_to_header_file> -I<path_to_another_one>"
before you run configure.

* An old version of the GTK+ libraries was found instead of 
  your newly installed version. This commonly happens if a
  binary package of GTK+ was previously installed on your system,
  and you later compiled GTK+ from source.

  Fix: Remove the old libraries and include files.  If you are afraid
  that removing the old libraries may break other packages supplied by
  your distributor, you can try installing GLib, GTK+ and other
  libraries in a different prefix after setting the environment
  variable PKG_CONFIG_LIBDIR to point to lib/pkgconfig/ in that new
  prefix so that it does not try to read the *.pc files from the
  default directory (/usr/lib/pkgconfig).  However, removing the old
  packages is often the easier solution.

A detailed log of the ./configure output is written to the file
config.log. This may help diagnose problems.


      Generic Instructions for Building Auto-Configured Packages
      ==========================================================

To compile this package:

1.  Configure the package for your system.  In the directory that this
file is in, type './configure'.  If you're using 'csh' on an old
version of System V, you might need to type 'sh configure' instead to
prevent 'csh' from trying to execute 'configure' itself.

The 'configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation, and
creates the Makefile(s) (one in each subdirectory of the source
directory).  In some packages it creates a C header file containing
system-dependent definitions.  It also creates a file 'config.status'
that you can run in the future to recreate the current configuration.
Running 'configure' takes a minute or two.

To compile the package in a different directory from the one
containing the source code, you must use GNU make.  'cd' to the
directory where you want the object files and executables to go and
run 'configure' with the option '--srcdir=DIR', where DIR is the
directory that contains the source code.  Using this option is
actually unnecessary if the source code is in the parent directory of
the one in which you are compiling; 'configure' automatically checks
for the source code in '..' if it does not find it in the current
directory.

By default, 'make install' will install the package's files in
/usr/local/bin, /usr/local/lib, /usr/local/man, etc.  You can specify
an installation prefix other than /usr/local by giving 'configure' the
option '--prefix=PATH'.

You can specify separate installation prefixes for machine-specific
files and machine-independent files.  If you give 'configure' the
option '--exec-prefix=PATH', the package will use PATH as the prefix
for installing programs and libraries.  Normally, all files are
installed using the same prefix.

'configure' ignores any other arguments that you give it.

If your system requires unusual options for compilation or linking
that 'configure' doesn't know about, you can give 'configure' initial
values for some variables by setting them in the environment.  In
Bourne-compatible shells, you can do that on the command line like
this:
        CC='gcc -traditional' DEFS=-D_POSIX_SOURCE ./configure

The 'make' variables that you might want to override with environment
variables when running 'configure' are:

(For these variables, any value given in the environment overrides the
value that 'configure' would choose:)
CC              C compiler program.
                Default is 'cc', or 'gcc' if 'gcc' is in your PATH.
INSTALL         Program to use to install files.
                Default is 'install' if you have it, 'cp' otherwise.
INCLUDEDIR      Directory for 'configure' to search for include files.
                Default is /usr/include.

(For these variables, any value given in the environment is added to
the value that 'configure' chooses:)
DEFS            Configuration options, in the form '-Dfoo -Dbar ...'
LIBS            Libraries to link with, in the form '-lfoo -lbar ...'

If you need to do unusual things to compile the package, we encourage
you to teach 'configure' how to do them and mail the diffs to the
address given in the README so we can include them in the next
release.

2.  Type 'make' to compile the package.

3.  Type 'make install' to install programs, data files, and
documentation.

4.  You can remove the program binaries and object files from the
source directory by typing 'make clean'.  To also remove the
Makefile(s), the header file containing system-dependent definitions
(if the package uses one), and 'config.status' (all the files that
'configure' created), type 'make distclean'.

The file 'configure.in' is used as a template to create 'configure' by
a program called 'autoconf'.  You will only need it if you want to
regenerate 'configure' using a newer version of 'autoconf'.
